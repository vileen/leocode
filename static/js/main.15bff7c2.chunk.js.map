{"version":3,"sources":["http-client.ts","components/UsersList/UsersList.tsx","dataProviders/getUsers/getUsers.ts","components/SearchBar/SearchBar.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["httpClient","axios","create","Status","UsersList","className","searchValue","useState","Empty","status","setStatus","users","setUsers","classNames","classnames","useEffect","Loading","get","then","result","data","catch","Error","filteredUsers","reduce","aggr","index","name","username","toLowerCase","includes","push","length","getList","SearchBar","onChange","type","placeholder","event","target","value","App","setSearchValue","newValue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAIeA,E,OAFIC,EAAMC,S,UCQpBC,E,iBAAAA,K,cAAAA,E,cAAAA,E,mBAAAA,M,KAML,IA+DeC,EA/DoB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAC/C,EAA4BC,mBAAiBJ,EAAOK,OAApD,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BH,mBAAiB,IAA3C,mBAAOI,EAAP,KAAcC,EAAd,KACMC,EAAaC,IAAW,YAAaT,GAyC3C,OAvCAU,qBAAU,WACRL,EAAUP,EAAOa,SChBZhB,EAAWiB,IAHR,8CAIPC,MAAK,SAACC,GAAD,OAAYA,EAAOC,QDkBtBF,MAAK,SAACC,GACLP,EAASO,GACTT,EAAUP,EAAOK,UAElBa,OAAM,WACLX,EAAUP,EAAOmB,YAEpB,IA4BCb,IAAWN,EAAOa,QAElB,qBAAKX,UAAU,qBAAf,wBAIAI,IAAWN,EAAOmB,MAElB,qBAAKjB,UAAU,mBAAf,sDAOF,qBAAKA,UAAWQ,EAAhB,SAzCF,WACE,IAAMU,EAAgBZ,EAAMa,QAC1B,SAACC,EAAD,EAA2BC,GAAW,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAUb,OATID,EAAKE,cAAcC,SAASxB,EAAYuB,gBAC1CJ,EAAKM,KACH,sBAAK1B,UAAU,kBAAf,UACE,sBAAMA,UAAU,kBAAhB,SAAmCsB,IACnC,uBAAMtB,UAAU,iBAAhB,cAAmCuB,OAFrC,cAA6CF,KAO1CD,IAET,IAGF,OAAKF,EAAcS,OAMZT,EAJH,qBAAKlB,UAAU,mBAAf,+BAsByB4B,MEjDlBC,G,MAjBoB,SAAC,GAA6B,IAA3B7B,EAA0B,EAA1BA,UAAW8B,EAAe,EAAfA,SACzCtB,EAAaC,IAAW,YAAaT,GAM3C,OACE,uBACEA,UAAWQ,EACXuB,KAAK,OACLC,YAAY,yBACZF,SATJ,SAAsBG,GACpBH,EAASG,EAAMC,OAAOC,Y,MCSXC,MAhBf,WACE,MAAsClC,mBAAS,IAA/C,mBAAOD,EAAP,KAAoBoC,EAApB,KAMA,OACE,sBAAKrC,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,wBACA,cAAC,EAAD,CAAWA,UAAU,iBAAiB8B,SAP1C,SAAiCQ,GAC/BD,EAAeC,MAOb,cAAC,EAAD,CAAWtC,UAAU,iBAAiBC,YAAaA,QCL1CsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.15bff7c2.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst httpClient = axios.create();\n\nexport default httpClient;\n","import classnames from 'classnames';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport getUsers, { User } from '../../dataProviders/getUsers';\nimport './UsersList.css';\n\ntype Props = {\n  searchValue: string;\n  className?: string;\n}\n\nenum Status {\n  Error = 'Error',\n  Empty = 'Empty',\n  Loading = 'Loading'\n}\n\nconst UsersList: React.FC<Props> = ({ className, searchValue }) => {\n  const [status, setStatus] = useState<Status>(Status.Empty);\n  const [users, setUsers] = useState<User[]>([]);\n  const classNames = classnames('UsersList', className);\n\n  useEffect(() => {\n    setStatus(Status.Loading);\n\n    getUsers()\n      .then((result) => {\n        setUsers(result);\n        setStatus(Status.Empty);\n      })\n      .catch(() => {\n        setStatus(Status.Error);\n      })\n  }, []);\n\n  function getList() {\n    const filteredUsers = users.reduce<ReactElement[]>(\n      (aggr, { name, username }, index) => {\n        if (name.toLowerCase().includes(searchValue.toLowerCase())) {\n          aggr.push(\n            <div className=\"UsersList__item\" key={`user${index}`}>\n              <span className=\"UsersList__name\">{name}</span>\n              <span className=\"UsersList__tag\">@{username}</span>\n            </div>\n          );\n        }\n\n        return aggr;\n      },\n      []\n    );\n\n    if (!filteredUsers.length) {\n      return (\n        <div className=\"UsersList__empty\">No users found :(</div>\n      );\n    }\n\n    return filteredUsers;\n  }\n\n  if (status === Status.Loading) {\n    return (\n      <div className=\"UsersList__loading\">Loading...</div>\n    );\n  }\n\n  if (status === Status.Error) {\n    return (\n      <div className=\"UsersList__error\">\n        Error occurred! Try refreshing the page.\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames}>{getList()}</div>\n  );\n};\n\nexport default UsersList;\n","import httpClient from \"../../http-client\";\nimport { User } from \"./types\";\n\nconst URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport default function getUsers(): Promise<User[]> {\n  return httpClient.get<User[]>(URL)\n    .then((result) => result.data)\n}\n","import classnames from 'classnames';\nimport React, { ChangeEvent } from 'react';\nimport './SearchBar.css';\n\ntype Props = {\n  onChange: (newValue: string) => void;\n  className?: string;\n}\n\nconst SearchBar: React.FC<Props> = ({ className, onChange }) => {\n  const classNames = classnames('SearchBar', className);\n\n  function handleChange(event: ChangeEvent<HTMLInputElement>) {\n    onChange(event.target.value);\n  }\n\n  return (\n    <input\n      className={classNames}\n      type=\"text\"\n      placeholder=\"Search by user name...\"\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default SearchBar;\n","import React, { useState } from 'react';\nimport UsersList from './components/UsersList';\nimport SearchBar from './components/SearchBar';\n\nimport './App.css';\n\nfunction App() {\n  const [searchValue, setSearchValue] = useState('');\n\n  function handleSearchValueChange(newValue: string) {\n    setSearchValue(newValue);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__title\">Users list</div>\n      <SearchBar className=\"App__searchBar\" onChange={handleSearchValueChange} />\n      <UsersList className=\"App__usersList\" searchValue={searchValue} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}